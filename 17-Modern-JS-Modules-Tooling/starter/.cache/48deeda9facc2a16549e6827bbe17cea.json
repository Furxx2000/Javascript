{"dependencies":[{"name":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\node_modules\\lodash-es\\package.json","includedInParent":true,"mtime":1629813957808},{"name":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\package.json","includedInParent":true,"mtime":1629815470467},{"name":"./_baseIsEqual.js","loc":{"line":1,"column":24},"parent":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\node_modules\\lodash-es\\isEqual.js","resolved":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\node_modules\\lodash-es\\_baseIsEqual.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _baseIsEqual = require('./_baseIsEqual.js');\n\nvar _baseIsEqual2 = _interopRequireDefault(_baseIsEqual);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return (0, _baseIsEqual2.default)(value, other);\n}\n\nexports.default = isEqual;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":3,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":0}},{"name":"isEqual","generated":{"line":41,"column":9},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":9}},{"generated":{"line":41,"column":16},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":0}},{"name":"value","generated":{"line":41,"column":17},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":17}},{"generated":{"line":41,"column":22},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":0}},{"name":"other","generated":{"line":41,"column":24},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":24}},{"generated":{"line":41,"column":29},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":0}},{"generated":{"line":41,"column":31},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":31,"column":31}},{"generated":{"line":42,"column":0},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":2}},{"generated":{"line":42,"column":9},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":9}},{"name":"value","generated":{"line":42,"column":36},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":21}},{"generated":{"line":42,"column":41},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":9}},{"name":"other","generated":{"line":42,"column":43},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":28}},{"generated":{"line":42,"column":48},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":9}},{"generated":{"line":42,"column":49},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":32,"column":2}},{"generated":{"line":43,"column":0},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":33,"column":1}},{"name":"isEqual","generated":{"line":45,"column":18},"source":"node_modules\\lodash-es\\isEqual.js","original":{"line":35,"column":15}}],"sources":{"node_modules\\lodash-es\\isEqual.js":"import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n"},"lineCount":null}},"hash":"3b08f7af513f52af9b033872ea935dd6","cacheData":{"env":{}},"id":128}