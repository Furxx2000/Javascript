{"dependencies":[{"name":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\node_modules\\lodash-es\\package.json","includedInParent":true,"mtime":1629813957808},{"name":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\package.json","includedInParent":true,"mtime":1629815470467},{"name":"./isInteger.js","loc":{"line":1,"column":22},"parent":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\node_modules\\lodash-es\\isSafeInteger.js","resolved":"C:\\Users\\WEN\\Desktop\\complete-javascript-course-master\\17-Modern-JS-Modules-Tooling\\starter\\node_modules\\lodash-es\\isInteger.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isInteger = require('./isInteger.js');\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n * double precision number which isn't the result of a rounded unsafe integer.\n *\n * **Note:** This method is based on\n * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n * @example\n *\n * _.isSafeInteger(3);\n * // => true\n *\n * _.isSafeInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isSafeInteger(Infinity);\n * // => false\n *\n * _.isSafeInteger('3');\n * // => false\n */\nfunction isSafeInteger(value) {\n  return (0, _isInteger2.default)(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n}\n\nexports.default = isSafeInteger;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":1,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":4,"column":0}},{"name":"MAX_SAFE_INTEGER","generated":{"line":14,"column":4},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":4,"column":4}},{"generated":{"line":14,"column":23},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":4,"column":23}},{"generated":{"line":14,"column":39},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":4,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":6,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":33,"column":0}},{"name":"isSafeInteger","generated":{"line":43,"column":9},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":33,"column":9}},{"generated":{"line":43,"column":22},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":33,"column":0}},{"name":"value","generated":{"line":43,"column":23},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":33,"column":23}},{"generated":{"line":43,"column":28},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":33,"column":0}},{"generated":{"line":43,"column":30},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":33,"column":30}},{"generated":{"line":44,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":2}},{"generated":{"line":44,"column":9},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":9}},{"name":"value","generated":{"line":44,"column":34},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":19}},{"generated":{"line":44,"column":39},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":9}},{"name":"value","generated":{"line":44,"column":44},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":29}},{"generated":{"line":44,"column":53},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":38}},{"name":"MAX_SAFE_INTEGER","generated":{"line":44,"column":54},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":39}},{"generated":{"line":44,"column":70},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":9}},{"name":"value","generated":{"line":44,"column":74},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":59}},{"name":"MAX_SAFE_INTEGER","generated":{"line":44,"column":83},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":68}},{"generated":{"line":44,"column":99},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":34,"column":2}},{"generated":{"line":45,"column":0},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":35,"column":1}},{"name":"isSafeInteger","generated":{"line":47,"column":18},"source":"node_modules\\lodash-es\\isSafeInteger.js","original":{"line":37,"column":15}}],"sources":{"node_modules\\lodash-es\\isSafeInteger.js":"import isInteger from './isInteger.js';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n * double precision number which isn't the result of a rounded unsafe integer.\n *\n * **Note:** This method is based on\n * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n * @example\n *\n * _.isSafeInteger(3);\n * // => true\n *\n * _.isSafeInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isSafeInteger(Infinity);\n * // => false\n *\n * _.isSafeInteger('3');\n * // => false\n */\nfunction isSafeInteger(value) {\n  return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isSafeInteger;\n"},"lineCount":null}},"hash":"fb25f1aab4ac451c7f416dc452078c4e","cacheData":{"env":{}},"id":147}